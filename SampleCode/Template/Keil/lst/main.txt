; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;37     
;;;38     void GPIO_Init (void)
000000  b510              PUSH     {r4,lr}
;;;39     {
;;;40         GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000002  2201              MOVS     r2,#1
000004  0391              LSLS     r1,r2,#14
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;41     }
00000c  bd10              POP      {r4,pc}
;;;42     
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40004040

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;86     
;;;87     void SYS_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  2059              MOVS     r0,#0x59
000004  4c25              LDR      r4,|L2.156|
000006  2116              MOVS     r1,#0x16
000008  2288              MOVS     r2,#0x88
                  |L2.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6021              STR      r1,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L2.10|
;;;88     {
;;;89         /* Unlock protected registers */
;;;90         SYS_UnlockReg();
;;;91     
;;;92         /* Enable HIRC clock (Internal RC 48MHz) */
;;;93         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;94     	
;;;95         /* Wait for HIRC clock ready */
;;;96         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;97     	
;;;98         /* Disable PLL first to avoid unstable when setting PLL */
;;;99         CLK_DisablePLL();
000022  f7fffffe          BL       CLK_DisablePLL
;;;100    
;;;101        /* Set PLL frequency */
;;;102        CLK->PLLCTL = (CLK->PLLCTL & ~(0x000FFFFFul)) | 0x0008C03Eul;
000026  481e              LDR      r0,|L2.160|
000028  6801              LDR      r1,[r0,#0]
00002a  4a1e              LDR      r2,|L2.164|
00002c  0d09              LSRS     r1,r1,#20
00002e  0509              LSLS     r1,r1,#20
000030  1889              ADDS     r1,r1,r2
000032  6001              STR      r1,[r0,#0]
;;;103    
;;;104        /* Waiting for PLL ready */
;;;105        CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
000034  2004              MOVS     r0,#4
000036  f7fffffe          BL       CLK_WaitClockReady
;;;106    
;;;107        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;108        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00003a  2100              MOVS     r1,#0
00003c  2007              MOVS     r0,#7
00003e  f7fffffe          BL       CLK_SetHCLK
;;;109    	
;;;110        CLK->PCLKDIV = (CLK_PCLKDIV_APB0DIV_DIV1 | CLK_PCLKDIV_APB1DIV_DIV1);
000042  4817              LDR      r0,|L2.160|
000044  2500              MOVS     r5,#0
000046  3840              SUBS     r0,r0,#0x40
000048  6345              STR      r5,[r0,#0x34]
;;;111    
;;;112        /* Enable UART0 clock */
;;;113        CLK_EnableModuleClock(UART0_MODULE);
00004a  4e17              LDR      r6,|L2.168|
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       CLK_EnableModuleClock
;;;114        CLK_EnableModuleClock(TMR1_MODULE);
000052  4f16              LDR      r7,|L2.172|
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       CLK_EnableModuleClock
;;;115    
;;;116        /* Switch UART0 clock source to HIRC */
;;;117        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
00005a  2101              MOVS     r1,#1
00005c  2200              MOVS     r2,#0
00005e  0689              LSLS     r1,r1,#26
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       CLK_SetModuleClock
;;;118        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_HIRC, 0);
000066  2107              MOVS     r1,#7
000068  2200              MOVS     r2,#0
00006a  0309              LSLS     r1,r1,#12
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       CLK_SetModuleClock
;;;119    
;;;120        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;121        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
000072  06b0              LSLS     r0,r6,#26
000074  6bc1              LDR      r1,[r0,#0x3c]
000076  22ff              MOVS     r2,#0xff
000078  0412              LSLS     r2,r2,#16
00007a  4391              BICS     r1,r1,r2
00007c  2233              MOVS     r2,#0x33
00007e  0452              LSLS     r2,r2,#17
000080  1889              ADDS     r1,r1,r2
000082  63c1              STR      r1,[r0,#0x3c]
;;;122                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;123    
;;;124    
;;;125        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB14MFP_Msk)) | SYS_GPB_MFPH_PB14MFP_CLKO;
000084  6bc1              LDR      r1,[r0,#0x3c]
000086  220f              MOVS     r2,#0xf
000088  0612              LSLS     r2,r2,#24
00008a  4391              BICS     r1,r1,r2
00008c  2207              MOVS     r2,#7
00008e  0652              LSLS     r2,r2,#25
000090  1889              ADDS     r1,r1,r2
000092  63c1              STR      r1,[r0,#0x3c]
;;;126    	
;;;127        /* Update System Core Clock */
;;;128        SystemCoreClockUpdate();
000094  f7fffffe          BL       SystemCoreClockUpdate
000098  6025              STR      r5,[r4,#0]
;;;129    
;;;130        /* Lock protected registers */
;;;131        SYS_LockReg();
;;;132    }
00009a  bdf8              POP      {r3-r7,pc}
;;;133    
                          ENDP

                  |L2.156|
                          DCD      0x40000100
                  |L2.160|
                          DCD      0x40000240
                  |L2.164|
                          DCD      0x0008c03e
                  |L2.168|
                          DCD      0x5f803d10
                  |L2.172|
                          DCD      0x5ec00003

                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;60     
;;;61     void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63         TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L3.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1508              ASRS     r0,r1,#20
00001c  4904              LDR      r1,|L3.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;64         TIMER_EnableInt(TIMER1);
;;;65         NVIC_EnableIRQ(TMR1_IRQn);	
;;;66         TIMER_Start(TIMER1);
;;;67     }
000028  bd10              POP      {r4,pc}
;;;68     
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      0x40050020
                  |L3.48|
                          DCD      0xe000e100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  TMR1_IRQHandler PROC
;;;42     
;;;43     void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  480c              LDR      r0,|L4.52|
000004  6881              LDR      r1,[r0,#8]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;44     {
00000a  d012              BEQ      |L4.50|
00000c  2101              MOVS     r1,#1
00000e  6081              STR      r1,[r0,#8]
;;;45     	static uint32_t LOG = 0;
;;;46     	static uint16_t CNT = 0;
;;;47     
;;;48         if(TIMER_GetIntFlag(TIMER1) == 1)
;;;49         {
;;;50             TIMER_ClearIntFlag(TIMER1);
;;;51     
;;;52     		if (CNT++ >= 1000)
000010  4909              LDR      r1,|L4.56|
000012  8808              LDRH     r0,[r1,#0]  ; CNT
000014  1c42              ADDS     r2,r0,#1
000016  800a              STRH     r2,[r1,#0]
000018  227d              MOVS     r2,#0x7d
00001a  00d2              LSLS     r2,r2,#3
00001c  4290              CMP      r0,r2
00001e  d308              BCC      |L4.50|
;;;53     		{		
;;;54     			CNT = 0;		
000020  2000              MOVS     r0,#0
000022  8008              STRH     r0,[r1,#0]
;;;55             	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
000024  684a              LDR      r2,[r1,#4]  ; LOG
000026  1c50              ADDS     r0,r2,#1
000028  6048              STR      r0,[r1,#4]  ; LOG
00002a  4904              LDR      r1,|L4.60|
00002c  a004              ADR      r0,|L4.64|
00002e  f7fffffe          BL       __2printf
                  |L4.50|
;;;56     		}
;;;57         }
;;;58     }
000032  bd10              POP      {r4,pc}
;;;59     
                          ENDP

                  |L4.52|
                          DCD      0x40050020
                  |L4.56|
                          DCD      ||area_number.11||
                  |L4.60|
                          DCD      ||.constdata||
                  |L4.64|
000040  2573203a          DCB      "%s : %4d\r\n",0
000044  20253464
000048  0d0a00  
00004b  00                DCB      0

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;68     
;;;69     void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71         SYS_ResetModule(UART0_RST);
000002  4816              LDR      r0,|L5.92|
000004  f7fffffe          BL       SYS_ResetModule
;;;72     
;;;73         /* Configure UART0 and set UART0 baud rate */
;;;74         UART_Open(UART0, 115200);
000008  4c15              LDR      r4,|L5.96|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;75     
;;;76     	/* Set UART receive time-out */
;;;77     	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;78     
;;;79     	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00001c  f7fffffe          BL       CLK_GetCPUFreq
000020  4601              MOV      r1,r0
000022  a010              ADR      r0,|L5.100|
000024  f7fffffe          BL       __2printf
;;;80     	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000028  f7fffffe          BL       CLK_GetHXTFreq
00002c  4601              MOV      r1,r0
00002e  a014              ADR      r0,|L5.128|
000030  f7fffffe          BL       __2printf
;;;81     	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000034  f7fffffe          BL       CLK_GetLXTFreq
000038  4601              MOV      r1,r0
00003a  a017              ADR      r0,|L5.152|
00003c  f7fffffe          BL       __2printf
;;;82     	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000040  f7fffffe          BL       CLK_GetPCLK0Freq
000044  4601              MOV      r1,r0
000046  a01a              ADR      r0,|L5.176|
000048  f7fffffe          BL       __2printf
;;;83     	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());
00004c  f7fffffe          BL       CLK_GetPCLK1Freq
000050  4601              MOV      r1,r0
000052  a01e              ADR      r0,|L5.204|
000054  f7fffffe          BL       __2printf
;;;84     	
;;;85     }
000058  bd10              POP      {r4,pc}
;;;86     
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      0x04000010
                  |L5.96|
                          DCD      0x40070000
                  |L5.100|
000064  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000068  4b5f4765
00006c  74435055
000070  46726571
000074  203a2025
000078  38640d0a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L5.128|
000080  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000084  47657448
000088  58544672
00008c  6571203a
000090  20253864
000094  0d0a00  
000097  00                DCB      0
                  |L5.152|
000098  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
00009c  4765744c
0000a0  58544672
0000a4  6571203a
0000a8  20253864
0000ac  0d0a00  
0000af  00                DCB      0
                  |L5.176|
0000b0  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000b4  47657450
0000b8  434c4b30
0000bc  46726571
0000c0  203a2025
0000c4  38640d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L5.204|
0000cc  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000d0  47657450
0000d4  434c4b31
0000d8  46726571
0000dc  203a2025
0000e0  38640d0a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;141    
;;;142    int main()
000000  f7fffffe          BL       SYS_Init
;;;143    {
;;;144        SYS_Init();
;;;145    
;;;146        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;147    
;;;148    /*
;;;149    		0	24000000
;;;150    		1	12000000
;;;151    		2	6000000
;;;152    		3	3000000
;;;153    		4	1500000
;;;154    		5	750000
;;;155    		6	375000
;;;156    		7	187500
;;;157    		8	93750
;;;158    		9	46875
;;;159    */
;;;160    
;;;161        CLK_EnableCKO(CLK_CLKSEL1_CLKOSEL_HIRC, CKO_FREQ_6M, 0);
000008  2200              MOVS     r2,#0
00000a  2102              MOVS     r1,#2
00000c  2030              MOVS     r0,#0x30
00000e  f7fffffe          BL       CLK_EnableCKO
;;;162    	
;;;163    	TIMER1_Init();
000012  f7fffffe          BL       TIMER1_Init
                  |L6.22|
;;;164    	
;;;165    	
;;;166        /* Got no where to go, just loop forever */
;;;167        while(1)
000016  e7fe              B        |L6.22|
;;;168        {
;;;169    
;;;170        }
;;;171    }
;;;172    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  544d5231          DCB      0x54,0x4d,0x52,0x31
000004  5f495251          DCB      0x5f,0x49,0x52,0x51
000008  48616e64          DCB      0x48,0x61,0x6e,0x64
00000c  6c657200          DCB      0x6c,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  BitFlag
000000  00                DCB      0x00

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  ||CNT||
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  LOG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_BitFlag____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REVSH|
#line 402
|__asm___6_main_c_BitFlag____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
